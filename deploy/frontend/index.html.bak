<!DOCTYPE html>
<html lang="zh-tw">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>極速賽車 - 生產版</title>
    <link rel="icon" type="image/svg+xml" href="favicon.svg">
    <link rel="stylesheet" href="./src/styles/main.css?v=1.4">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <!-- 先引入 Vue -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 然後引入組件 -->
    <script src="./src/components/BetRecords.js"></script>
    <script src="./src/components/DrawHistory.js"></script>
    <script>
        // 登入檢查，如果用戶未登入，則重定向到登入頁面
        document.addEventListener('DOMContentLoaded', function() {
            const isLoggedIn = sessionStorage.getItem('isLoggedIn');
            if (!isLoggedIn) {
                window.location.href = 'login.html';
            }
        });
    </script>
    <style>
        /* 開獎動畫相關樣式 */
        @keyframes numberBounce {
            0% { transform: translateY(0); }
            50% { transform: translateY(-15px); }
            100% { transform: translateY(0); }
        }
        
        @keyframes numberSpin {
            0% { transform: rotateY(0); }
            100% { transform: rotateY(360deg); }
        }
        
        @keyframes highlightWinner {
            0% { box-shadow: 0 0 5px 2px rgba(255, 215, 0, 0.5); }
            50% { box-shadow: 0 0 20px 10px rgba(255, 215, 0, 0.8); }
            100% { box-shadow: 0 0 5px 2px rgba(255, 215, 0, 0.5); }
        }
        
        .number-ball.animating {
            animation: numberBounce 0.5s ease-in-out;
        }
        
        .number-ball.spinning {
            animation: numberSpin 0.8s ease-in-out;
        }
        
        .number-ball.winning {
            animation: highlightWinner 1.5s ease-in-out infinite;
        }
        
        .race-animation-container {
            height: 120px;
            background: linear-gradient(to right, #f1f1f1, #e0e0e0);
            position: relative;
            overflow: hidden;
            margin-bottom: 10px;
            border-radius: 5px;
        }
        
        .car-racer {
            width: 30px;
            height: 20px;
            position: absolute;
            transition: left 3s cubic-bezier(0.25, 0.1, 0.25, 1);
        }
        
        .race-finish-line {
            position: absolute;
            right: 10px;
            top: 0;
            height: 100%;
            width: 5px;
            background: repeating-linear-gradient(
                to bottom,
                black,
                black 10px,
                white 10px,
                white 20px
            );
        }
        
        /* 確保開獎結果水平排列 */
        .current-result {
            display: flex !important;
            flex-direction: row !important;
            justify-content: space-evenly !important; /* 改為均勻分佈 */
            flex-wrap: nowrap !important;
            overflow-x: auto !important;
            width: 100%;
            padding: 10px;
        }
        
        /* 歷史記錄 */
        .history-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .history-item .period-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        
        .history-item .period {
            font-weight: bold;
        }
        
        .history-item .time {
            color: #888;
        }
        
        .history-item .result-balls {
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            overflow-x: auto;
            justify-content: space-between;
            padding: 5px 0;
        }
        
        .no-records {
            padding: 20px;
            text-align: center;
            color: #888;
        }
        
        .history-header {
            background-color: #0e6f3d;
            color: white;
            padding: 10px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .history-header .title {
            font-size: 18px;
            font-weight: bold;
        }
        
        .history-header .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
        }
        
        /* 快速投注樣式 */
        .position-selector {
            margin-bottom: 20px;
        }
        
        .position-tabs {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        
        .position-tab {
            padding: 8px 12px;
            background: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }
        
        .position-tab:hover {
            background: #e8f4f8;
            border-color: #4CAF50;
        }
        
        .position-tab.active {
            background: #4CAF50;
            color: white;
            border-color: #4CAF50;
        }
        
        .position-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 10px;
            padding: 8px 12px;
            background-color: #f8f9fa;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }
        
        .selected-count {
            font-size: 14px;
            color: #28a745;
            font-weight: 500;
        }
        
        .clear-positions {
            padding: 4px 12px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .clear-positions:hover {
            background-color: #c82333;
        }
        
        .no-position-hint {
            text-align: center;
            padding: 40px 20px;
            color: #888;
            font-size: 16px;
        }
        
        .no-position-hint p {
            margin: 0;
        }
        
        /* 現代化導航欄樣式 */
        .modern-navbar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
            padding: 0;
        }
        
        .navbar-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 12px 20px;
            display: grid;
            grid-template-columns: auto 1fr auto;
            align-items: center;
            gap: 20px;
        }
        
        .navbar-brand {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .brand-logo {
            height: 40px;
        }
        
        .brand-title {
            font-size: 24px;
            color: white;
            font-weight: bold;
            letter-spacing: 1px;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.2);
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
            color: white;
        }
        
        .user-info span {
            font-size: 16px;
        }
        
        .balance-info {
            background: rgba(255, 255, 255, 0.15);
            padding: 8px 15px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: background 0.3s ease;
        }
        
        .balance-info:hover {
            background: rgba(255, 255, 255, 0.25);
        }
        
        .balance-icon {
            font-size: 18px;
        }
        
        .balance-amount {
            font-weight: 600;
        }
        
        .refresh-balance-btn {
            background: none;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            transition: transform 0.3s ease;
            padding: 5px;
        }
        
        .refresh-balance-btn:hover {
            transform: rotate(90deg);
        }
        
        .logout-btn {
            background: #ff4757;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 8px 18px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease;
        }
        
        .logout-btn:hover {
            background: #e04050;
            transform: translateY(-2px);
        }
        
        .logout-btn .fas {
            margin-right: 5px;
        }
        
        /* 熱門投注樣式 */
        .hot-bets-section {
            background: #fff;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .hot-bets-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
            color: #333;
        }
        
        .hot-bets-header i {
            color: #ff6b6b;
            font-size: 20px;
        }
        
        .hot-bets-header h3 {
            margin: 0;
            font-size: 18px;
        }
        
        .hot-bets-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 10px;
        }
        
        .hot-bet-item {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 6px;
            text-align: center;
            font-size: 14px;
        }
        
        .hot-bet-item .bet-type {
            font-weight: bold;
            color: #495057;
        }
        
        .hot-bet-item .bet-count {
            color: #e8590c;
            font-weight: bold;
            margin-top: 5px;
        }
        
        .hot-bets-loading {
            text-align: center;
            padding: 20px;
            color: #888;
        }
    </style>
</head>
<body>
    <div id="app" class="game-container">
        <!-- 現代化導航欄 -->
        <header class="modern-navbar">
            <div class="navbar-container">
                <div class="navbar-brand">
                    <img src="favicon.svg" alt="Logo" class="brand-logo">
                    <span class="brand-title">極速賽車</span>
                </div>
                
                <div class="game-period-info">
                    <span class="period-label">第 {{ gameState.current_period }} 期</span>
                    <span class="countdown" :class="{ 'ending': gameState.countdown_seconds < 10 }">
                        {{ gameState.status === 'betting' ? formattedCountdown : '開獎中' }}
                    </span>
                </div>
                
                <div class="user-info">
                    <span>歡迎, {{ username }}</span>
                    <div class="balance-info">
                        <i class="fas fa-wallet balance-icon"></i>
                        <span class="balance-amount">{{ formattedBalance }}</span>
                        <button @click="refreshBalance" class="refresh-balance-btn" title="刷新餘額">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                    </div>
                    <button @click="logout" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i> 登出
                    </button>
                </div>
            </div>
        </header>

        <main class="main-content">
            <div class="left-panel">
                <!-- 開獎結果 -->
                <div class="draw-result-section">
                    <h4>
                        第 {{ gameState.last_period }} 期開獎結果
                        <button class="history-btn" @click="showDrawHistory = true">歷史記錄</button>
                    </h4>
                    <div class="current-result">
                        <div v-for="(num, index) in gameState.last_result" :key="index" 
                             class="number-ball"
                             :class="['rank-' + (index + 1), { animating: isAnimating, spinning: isSpinning, winning: isWinning }]">
                            {{ num }}
                        </div>
                    </div>
                </div>

                <!-- 熱門投注 -->
                <div class="hot-bets-section">
                    <div class="hot-bets-header">
                        <i class="fas fa-fire"></i>
                        <h3>熱門投注</h3>
                    </div>
                    <div v-if="hotBets.loading" class="hot-bets-loading">加載中...</div>
                    <div v-else class="hot-bets-grid">
                        <div v-for="bet in hotBets.data" :key="bet.type" class="hot-bet-item">
                            <div class="bet-type">{{ bet.type }}</div>
                            <div class="bet-count">{{ bet.count }} 次</div>
                        </div>
                    </div>
                </div>

                <!-- 投注區 -->
                <div class="betting-section">
                    <div class="bet-type-tabs">
                        <button v-for="tab in betTabs" :key="tab.type"
                                :class="{ active: currentBetType === tab.type }"
                                @click="currentBetType = tab.type">
                            {{ tab.name }}
                        </button>
                    </div>
                    
                    <div class="bet-options-container">
                        <!-- 冠亞和值 -->
                        <div v-if="currentBetType === 'sumValue'" class="bet-options grid-bets">
                            <div v-for="value in sumValueOptions" :key="value.value" 
                                 class="bet-option"
                                 :class="{ selected: isSelected('sumValue', value.value) }"
                                 @click="toggleBet('sumValue', value.value)">
                                <span class="value">{{ value.value }}</span>
                                <span class="odds">{{ value.odds }}</span>
                            </div>
                        </div>

                        <!-- 定位膽 -->
                        <div v-if="currentBetType === 'number'" class="bet-options">
                            <div class="position-selector">
                                <div class="position-tabs">
                                    <div v-for="pos in positionOptions" :key="pos.value"
                                         class="position-tab"
                                         :class="{ active: selectedPositions.includes(pos.value) }"
                                         @click="togglePosition(pos.value)">
                                        {{ pos.name }}
                                    </div>
                                </div>
                                <div class="position-controls">
                                    <span class="selected-count">{{ selectedPositions.length }} 個位置已選</span>
                                    <button class="clear-positions" @click="clearPositions">清空</button>
                                </div>
                            </div>

                            <div v-if="selectedPositions.length === 0" class="no-position-hint">
                                <p>請先在上方選擇至少一個名次</p>
                            </div>
                            <div v-else class="grid-bets">
                                <div v-for="num in 10" :key="num"
                                     class="bet-option"
                                     :class="{ selected: isSelected('number', num) }"
                                     @click="toggleBet('number', num)">
                                    <span class="value number-ball" :class="'rank-' + num">{{ num }}</span>
                                    <span class="odds">{{ getOdds('number') }}</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 龍虎 -->
                        <div v-if="currentBetType === 'dragonTiger'" class="bet-options grid-bets-sm">
                           <div v-for="dt in dragonTigerOptions" :key="dt.value"
                                class="bet-option"
                                :class="{ selected: isSelected('dragonTiger', dt.value) }"
                                @click="toggleBet('dragonTiger', dt.value)">
                               <span class="value">{{ dt.name }}</span>
                               <span class="odds">{{ dt.odds }}</span>
                           </div>
                        </div>

                        <!-- 兩面盤 -->
                        <div v-if="currentBetType === 'twoSided'" class="two-sided-betting">
                            <table class="two-sided-table">
                                <thead>
                                    <tr>
                                        <th>名次</th>
                                        <th>大</th>
                                        <th>小</th>
                                        <th>單</th>
                                        <th>雙</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="pos in twoSidedPositions" :key="pos.value">
                                        <td>{{ pos.name }}</td>
                                        <td v-for="type in ['big', 'small', 'odd', 'even']" :key="type"
                                            :class="{ selected: isSelected(pos.value, type) }"
                                            @click="toggleBet(pos.value, type)">
                                            <span>{{ getOdds(pos.value) }}</span>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="right-panel">
                <!-- 投注單 -->
                <div class="bet-slip-section">
                    <h4>投注單</h4>
                    <div class="bet-slip-content">
                        <div v-if="betSlip.length === 0" class="empty-slip">
                            投注單是空的
                        </div>
                        <div v-else class="bet-slip-items">
                            <div v-for="(bet, index) in betSlip" :key="index" class="slip-item">
                                <div class="item-info">
                                    <span class="type">{{ formatBetType(bet.type, bet.value) }}</span>
                                    <span class="odds">@ {{ bet.odds }}</span>
                                </div>
                                <div class="item-controls">
                                    <input type="number" v-model.number="bet.amount" min="1" class="bet-amount-input">
                                    <button @click="removeBet(index)" class="remove-bet-btn">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="bet-slip-footer">
                        <div class="bet-summary">
                            <span>總計: {{ totalBetAmount }}</span>
                            <span>可贏: {{ totalWinAmount.toFixed(2) }}</span>
                        </div>
                        <div class="chip-selector">
                            <button v-for="chip in chips" :key="chip" 
                                    class="chip" 
                                    :class="{ active: currentChip === chip }"
                                    @click="setChip(chip)">
                                {{ chip }}
                            </button>
                        </div>
                        <div class="action-buttons">
                            <button @click="clearBetSlip" class="action-btn clear-btn">清除</button>
                            <button @click="placeBet" class="action-btn place-bet-btn" :disabled="isBettingDisabled">
                                {{ isBettingDisabled ? '封盤中' : '確認下注' }}
                            </button>
                        </div>
                    </div>
                </div>

                <!-- 投注記錄 -->
                <div class="bet-records-section">
                    <bet-records 
                        :username="username"
                        @show-message="displayMessage"
                    ></bet-records>
                </div>
            </div>
        </main>

        <!-- 歷史開獎記錄彈窗 -->
        <draw-history 
            v-if="showDrawHistory" 
            @close="showDrawHistory = false"
        ></draw-history>

        <!-- 消息提示 -->
        <div v-if="message.text" class="message-toast" :class="message.type">
            {{ message.text }}
        </div>
    </div>

    <script>
        new Vue({
            el: '#app',
            data: {
                username: sessionStorage.getItem('username') || '訪客',
                balance: 0,
                dailyProfit: 0,
                isLoggedIn: !!sessionStorage.getItem('isLoggedIn'),
                gameState: {
                    current_period: '加載中...',
                    countdown_seconds: 0,
                    last_result: [],
                    last_period: '加載中...',
                    status: 'loading'
                },
                hotBets: {
                    data: [],
                    loading: true,
                },
                currentBetType: 'sumValue',
                betTabs: [
                    { type: 'sumValue', name: '冠亞和' },
                    { type: 'number', name: '定位膽' },
                    { type: 'dragonTiger', name: '龍虎' },
                    { type: 'twoSided', name: '兩面盤' }
                ],
                sumValueOptions: [
                    ...[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19].map(v => ({ value: v, odds: 0 })),
                    { value: 'big', name: '大', odds: 0 },
                    { value: 'small', name: '小', odds: 0 },
                    { value: 'odd', name: '單', odds: 0 },
                    { value: 'even', name: '雙', odds: 0 },
                ],
                positionOptions: [
                    { name: '冠軍', value: 'first' }, { name: '亞軍', value: 'second' },
                    { name: '第三名', value: 'third' }, { name: '第四名', value: 'fourth' },
                    { name: '第五名', value: 'fifth' }, { name: '第六名', value: 'sixth' },
                    { name: '第七名', value: 'seventh' }, { name: '第八名', value: 'eighth' },
                    { name: '第九名', value: 'ninth' }, { name: '第十名', value: 'tenth' },
                ],
                dragonTigerOptions: [
                    { value: '1v10', name: '冠軍 vs 第十', odds: 0 },
                    { value: '2v9', name: '亞軍 vs 第九', odds: 0 },
                    { value: '3v8', name: '三 vs 第八', odds: 0 },
                    { value: '4v7', name: '四 vs 第七', odds: 0 },
                    { value: '5v6', name: '五 vs 第六', odds: 0 },
                ],
                twoSidedPositions: [
                    { name: '冠軍', value: 'champion' }, { name: '亞軍', value: 'runnerup' },
                    { name: '第三名', value: 'third' }, { name: '第四名', value: 'fourth' },
                    { name: '第五名', value: 'fifth' }, { name: '第六名', value: 'sixth' },
                    { name: '第七名', value: 'seventh' }, { name: '第八名', value: 'eighth' },
                    { name: '第九名', value: 'ninth' }, { name: '第十名', value: 'tenth' },
                ],
                betSlip: [],
                chips: [10, 50, 100, 500, 1000],
                currentChip: 100,
                selectedPositions: [], // 用於定位膽
                odds: {}, // 從後端獲取賠率
                showBetHistory: false,
                betHistory: {
                    records: [],
                    currentPage: 1,
                    totalPages: 1,
                    limit: 10
                },
                showDrawHistory: false,
                drawHistory: {
                    records: [],
                    currentPage: 1,
                    totalPages: 1,
                    limit: 10,
                    searchPeriod: '',
                    searchDate: ''
                },
                message: {
                    text: '',
                    type: 'success', // 'success' or 'error'
                    timeout: null
                },
                ws: null,
                isAnimating: false,
                isSpinning: false,
                isWinning: false,
            },
            computed: {
                formattedCountdown() {
                    const minutes = Math.floor(this.gameState.countdown_seconds / 60);
                    const seconds = this.gameState.countdown_seconds % 60;
                    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                },
                totalBetAmount() {
                    return this.betSlip.reduce((sum, bet) => sum + (bet.amount || 0), 0);
                },
                totalWinAmount() {
                    return this.betSlip.reduce((sum, bet) => sum + ((bet.amount || 0) * bet.odds), 0);
                },
                isBettingDisabled() {
                    return this.gameState.status !== 'betting' || this.betSlip.length === 0;
                },
                formattedBalance() {
                    return this.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                },
                formattedDailyProfit() {
                    const profit = parseFloat(this.dailyProfit);
                    if (isNaN(profit)) return '0.00';
                    return profit.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
            },
            created() {
                if(this.isLoggedIn) {
                    this.getGameData();
                    this.connectWebSocket();
                    this.fetchDailyProfit();
                } else {
                    window.location.href = 'login.html';
                }
            },
            methods: {
                getOdds(type, subType = null) {
                    if (this.odds[type]) {
                        if (subType) {
                            return this.odds[type][subType] || 0;
                        }
                        if (typeof this.odds[type] === 'object') {
                            // 對於兩面盤，返回一個通用賠率
                            return this.odds[type].big || 0; 
                        }
                        return this.odds[type] || 0;
                    }
                    return 0;
                },
                updateOdds() {
                    this.sumValueOptions.forEach(opt => {
                        if (['big', 'small', 'odd', 'even'].includes(opt.value)) {
                            opt.odds = this.getOdds('sumValue', opt.value);
                        } else {
                            opt.odds = this.getOdds('sumValue', opt.value.toString());
                        }
                    });
                    this.dragonTigerOptions.forEach(opt => opt.odds = this.getOdds('dragonTiger'));
                },
                connectWebSocket() {
                    // 根據環境設定 WebSocket URL
                    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    const wsHost = window.location.hostname;
                    const wsPort = wsHost === 'localhost' ? ':3002' : ''; // 本地開發時使用端口
                    const wsUrl = `${wsProtocol}//${wsHost}${wsPort}`;

                    console.log(`正在連接 WebSocket: ${wsUrl}`);
                    this.ws = new WebSocket(wsUrl);

                    this.ws.onopen = () => {
                        console.log('WebSocket 連接成功');
                    };
                    this.ws.onmessage = (event) => {
                        const data = JSON.parse(event.data);
                        if (data.type === 'gameStateUpdate') {
                            this.gameState = data.payload;
                            if (this.gameState.status === 'drawing') {
                                this.triggerDrawAnimation();
                            }
                        } else if (data.type === 'balanceUpdate') {
                            this.balance = data.payload.balance;
                        } else if (data.type === 'newBet') {
                            this.fetchHotBets();
                        }
                    };
                    this.ws.onclose = () => {
                        console.log('WebSocket 連接已關閉，將在5秒後嘗試重連');
                        setTimeout(() => this.connectWebSocket(), 5000);
                    };
                    this.ws.onerror = (error) => {
                        console.error('WebSocket 錯誤:', error);
                    };
                },
                triggerDrawAnimation() {
                    this.isAnimating = true;
                    this.isSpinning = true;
                    setTimeout(() => {
                        this.isAnimating = false;
                        this.isSpinning = false;
                        this.isWinning = true;
                        setTimeout(() => this.isWinning = false, 3000); // 高亮持續3秒
                    }, 1000);
                },
                async getGameData() {
                    try {
                        console.log("開始獲取遊戲數據...");
                        const response = await fetch('http://localhost:3002/api/game-data');
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const data = await response.json();
                        this.gameState = data.gameState;
                        this.balance = data.balance;
                        this.odds = data.odds;
                        this.updateOdds();
                        await this.fetchHotBets();
                    } catch (error) {
                        console.error('獲取遊戲數據失敗:', error);
                        this.displayMessage('無法加載遊戲數據，請刷新頁面', 'error');
                    }
                },
                async refreshBalance() {
                    try {
                        console.log("開始刷新餘額...");
                        const response = await fetch(`http://localhost:3002/api/balance?username=${this.username}`);
                         if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const data = await response.json();
                        this.balance = data.balance;
                        this.displayMessage('餘額已更新', 'success');
                    } catch (error) {
                        console.error('獲取餘額失敗:', error);
                        this.displayMessage('無法更新餘額', 'error');
                    }
                },
                 async fetchDailyProfit() {
                    try {
                        const response = await fetch(`http://localhost:3002/api/daily-profit?username=${this.username}`);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const data = await response.json();
                        this.dailyProfit = data.profit;
                    } catch (error) {
                        console.error('獲取今日盈虧失敗:', error);
                    }
                },
                toggleBet(type, value) {
                    if (this.gameState.status !== 'betting') {
                        this.displayMessage('已封盤，無法下注', 'error');
                        return;
                    }
                    if (type === 'number' && this.selectedPositions.length === 0) {
                        this.displayMessage('請先選擇定位膽的名次', 'error');
                        return;
                    }

                    const positions = (type === 'number') ? this.selectedPositions : [null];
                    
                    positions.forEach(position => {
                        const betTypeForSlip = position ? `${type}-${position}` : type;
                        const existingBetIndex = this.betSlip.findIndex(b => b.type === betTypeForSlip && b.value === value);

                        if (existingBetIndex > -1) {
                            this.betSlip.splice(existingBetIndex, 1);
                        } else {
                             let odds;
                            if (type === 'sumValue') {
                                odds = this.getOdds('sumValue', value.toString());
                            } else if (type === 'dragonTiger') {
                                odds = this.getOdds('dragonTiger');
                            } else if (type === 'number') {
                                odds = this.getOdds('number');
                            } else {
                                odds = this.getOdds(type);
                            }
                            this.betSlip.push({ type: betTypeForSlip, value, amount: this.currentChip, odds });
                        }
                    });

                    if (type === 'number') {
                        this.clearPositions();
                    }
                },
                isSelected(type, value) {
                    if (type === 'number' && this.selectedPositions.length > 0) {
                        // 對於定位膽，只要任何一個選中位置的盤口裡有這個號碼，就視為選中
                        return this.selectedPositions.some(p => this.betSlip.some(b => b.type === `${type}-${p}` && b.value === value));
                    }
                    return this.betSlip.some(b => b.type === type && b.value === value);
                },
                togglePosition(position) {
                    const index = this.selectedPositions.indexOf(position);
                    if (index > -1) {
                        this.selectedPositions.splice(index, 1);
                    } else {
                        this.selectedPositions.push(position);
                    }
                },
                clearPositions() {
                    this.selectedPositions = [];
                },
                setChip(amount) {
                    this.currentChip = amount;
                    // 更新投注單中所有投注項的金額
                    this.betSlip.forEach(bet => {
                        bet.amount = amount;
                    });
                },
                removeBet(index) {
                    this.betSlip.splice(index, 1);
                },
                clearBetSlip() {
                    this.betSlip = [];
                },
                async placeBet() {
                    if (this.isBettingDisabled) return;

                    const bets = this.betSlip.map(bet => {
                        let type = bet.type;
                        let position = null;
                        if (bet.type.includes('-')) {
                            [type, position] = bet.type.split('-');
                        }
                        return {
                            amount: bet.amount,
                            type: type,
                            value: bet.value,
                            position: position
                        };
                    });

                    try {
                        const response = await fetch('http://localhost:3002/api/bet', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${sessionStorage.getItem('token')}`
                            },
                            body: JSON.stringify({
                                username: this.username,
                                bets: bets
                            })
                        });
                        const data = await response.json();
                        if (data.success) {
                            this.displayMessage('下注成功', 'success');
                            this.betSlip = [];
                            this.balance = data.newBalance;
                        } else {
                            this.displayMessage(data.message, 'error');
                        }
                    } catch (error) {
                        console.error('下注失敗:', error);
                        this.displayMessage('下注失敗，請稍後重試', 'error');
                    }
                },
                async fetchBetHistory(page = 1) {
                    this.showBetHistory = true;
                    try {
                        const response = await fetch(`http://localhost:3002/api/bets?username=${this.username}&page=${page}&limit=${this.betHistory.limit}`);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const data = await response.json();
                        this.betHistory.records = data.bets;
                        this.betHistory.currentPage = data.currentPage;
                        this.betHistory.totalPages = data.totalPages;
                    } catch (error) {
                        console.error('獲取投注記錄失敗:', error);
                    }
                },
                async fetchDrawHistory(page = 1) {
                    this.showDrawHistory = true;
                    try {
                        console.log("獲取開獎歷史...");
                        const response = await fetch(`http://localhost:3002/api/history?page=${page}&limit=${this.drawHistory.limit}`);
                        console.log("開獎歷史API響應狀態:", response.status);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const data = await response.json();
                        this.drawHistory.records = data.records;
                        this.drawHistory.currentPage = data.currentPage;
                        this.drawHistory.totalPages = data.totalPages;
                    } catch (error) {
                        console.error('獲取開獎歷史記錄失敗:', error);
                        this.displayMessage('無法加載開獎記錄', 'error');
                    }
                },
                async searchDrawHistory() {
                    let url = `http://localhost:3002/api/history?page=1&limit=${this.drawHistory.limit}`;
                    if (this.drawHistory.searchPeriod) {
                        url += `&period=${this.drawHistory.searchPeriod}`;
                    }
                    if (this.drawHistory.searchDate) {
                        url += `&date=${this.drawHistory.searchDate}`;
                    }
                    try {
                        const response = await fetch(url);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const data = await response.json();
                        this.drawHistory.records = data.records;
                        this.drawHistory.currentPage = data.currentPage;
                        this.drawHistory.totalPages = data.totalPages;
                    } catch (error) {
                        console.error('搜索開獎記錄失敗:', error);
                    }
                },
                formatBetType(type, value) {
                    // 這是一個複雜的格式化，根據您的投注類型來定
                    if (type.startsWith('number-')) {
                        const pos = type.split('-')[1];
                        const posName = this.positionOptions.find(p => p.value === pos)?.name || pos;
                        return `定位膽 - ${posName} - ${value}`;
                    }
                    switch(type) {
                        case 'sumValue':
                            const sumOpt = this.sumValueOptions.find(o => o.value === value);
                            return `冠亞和 - ${sumOpt.name || value}`;
                        case 'dragonTiger':
                             const dtOpt = this.dragonTigerOptions.find(o => o.value === value);
                             return dtOpt ? dtOpt.name : value;
                        case 'champion': return `冠軍 - ${this.formatTwoSided(value)}`;
                        case 'runnerup': return `亞軍 - ${this.formatTwoSided(value)}`;
                         case 'third': return `第三名 - ${this.formatTwoSided(value)}`;
                        case 'fourth': return `第四名 - ${this.formatTwoSided(value)}`;
                        case 'fifth': return `第五名 - ${this.formatTwoSided(value)}`;
                        case 'sixth': return `第六名 - ${this.formatTwoSided(value)}`;
                        case 'seventh': return `第七名 - ${this.formatTwoSided(value)}`;
                        case 'eighth': return `第八名 - ${this.formatTwoSided(value)}`;
                        case 'ninth': return `第九名 - ${this.formatTwoSided(value)}`;
                        case 'tenth': return `第十名 - ${this.formatTwoSided(value)}`;
                        default: return type;
                    }
                },
                formatTwoSided(value) {
                    const map = { big: '大', small: '小', odd: '單', even: '雙' };
                    return map[value] || value;
                },
                displayMessage(text, type = 'success') {
                    this.message.text = text;
                    this.message.type = type;
                    if (this.message.timeout) {
                        clearTimeout(this.message.timeout);
                    }
                    this.message.timeout = setTimeout(() => {
                        this.message.text = '';
                    }, 3000);
                },
                logout() {
                    sessionStorage.clear();
                    window.location.href = 'login.html';
                },
                async fetchHotBets() {
                    this.hotBets.loading = true;
                    try {
                        console.log("開始獲取熱門投注數據...");
                        const response = await fetch('http://localhost:3002/api/hot-bets');
                        this.hotBets.loading = false;
                        console.log("熱門投注API響應狀態:", response.status);

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const data = await response.json();
                         if (data.success) {
                            this.hotBets.data = data.data;
                        } else {
                            throw new Error(data.message);
                        }
                    } catch (error) {
                        this.hotBets.loading = false;
                        console.error('獲取熱門投注數據出錯:', error);
                        this.displayMessage('無法加載熱門投注數據', 'error');
                    }
                }
            }
        });
    </script>
</body>
</html>